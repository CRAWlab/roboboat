<?xml version="1.0"?>
<!--
\file      roboboat_sim.launch
-->

<launch>

  <!-- Debug flag -->
  <arg name="hydro_debug" default="0"/>
  <rosparam param="/use_sim_time">true</rosparam>

  <!-- Vehicle's initial pose -->
  <arg name="x"     default="0"/>
  <arg name="y"     default="0"/>
  <arg name="z"     value="0.13"/>
  <arg name="roll"  value="0"/>
  <arg name="pitch" value="0"/>
  <arg name="yaw"   default="0"/>

  <arg name="namespace" default=""/>
  <arg name="config" default="base" />

  <group ns="/$(arg namespace)">

    <!-- Translates /cmd_drive message to thrusters/*/input commands -->
    <node pkg="roboboat_gazebo" type="cmd_drive_translate.py" name="cmd_drive_to_thrusters">
      <param name="namespace" value="$(arg namespace)" />
    </node>

    <!-- Filter for Imu message -->
    <node pkg="imu_filter_madgwick" type="imu_filter_node" name="imu_filter_madgwick">
      <param name="~use_magnetic_field_msg" value="false" />
      <param name="~use_mag" value="false" />
      <param name="world_frame" value="enu" />
      <param name="publish_debug_topics" value="true" />
      <param name="~publish_tf" value="false" />
    </node>

    <!-- roboboat thruster controller -->
    <!--
    <node pkg="roboboat_controller" type="controller" name="controller">
      <rosparam file="$(find roboboat_gazebo)/config/roboboat_controller.yaml" />
    </node>
    -->

    <!-- Translate Imu's quaternion to Roll/Pitch/Yaw -->
    <node pkg="roboboat_gazebo" type="rpy_translator.py" name="rpy_translator" />

    <group if="$(eval namespace == '')">
      <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
      <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
            args="-urdf -x $(arg x) -y $(arg y) -z $(arg z) -R $(arg roll) -P $(arg pitch) -Y $(arg yaw) -model roboboat -param /robot_description"/>
    </group>

    <group unless="$(eval namespace == '')">
      <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
      <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
            args="-urdf -x $(arg x) -y $(arg y) -z $(arg z) -R $(arg roll) -P $(arg pitch) -Y $(arg yaw) -model $(arg namespace) -param /$(arg namespace)/robot_description"/>
    </group>

    <!-- Translates navsat/velocity from Vector3Stamped to TwistStamped on navsat/vel -->
    <node pkg="roboboat_gazebo" type="navsat_vel_translate.py" name="navvel_translate" />

    <node pkg="roboboat_gazebo" type="activate_control_service.py" name="activate_control_service" />

  </group>

  <!-- Basic localization -->
  <rosparam param="/$(arg namespace)/ekf_localization_node/tf_prefix" subst_value="True">$(arg namespace)</rosparam>
  <rosparam param="/$(arg namespace)/navsat_transform_node/tf_prefix" subst_value="True">$(arg namespace)</rosparam>
  <rosparam param="/$(arg namespace)/navsat_transform_node/use_odometry_yaw">true</rosparam>
  <include file="$(find roboboat_control)/launch/control.launch" ns="/$(arg namespace)" />

  <!-- Launches roboboat's description nodes -->
  <include file="$(find roboboat_description)/launch/description.launch">
    <arg name="namespace" value="$(arg namespace)" />
    <arg name="hydro_debug" value="$(arg hydro_debug)" />
  </include>

  <!-- Start up darknet_ros YOLO object detection nodes -->
  <!-- Bow ZED -->
  <!-- Not sure if this image_raw from Gazebo is RGB or not -->
  <include file="$(find darknet_ros)/launch/darknet_ros.launch" ns="bow" >
    <arg name="launch_prefix" default=""/>
    <arg name="image" default="/camera/rgb/image_raw" />
      <!-- Config and weights folder. -->
    <arg name="yolo_weights_path"          default="$(find darknet_ros)/yolo_network_config/weights"/>
    <arg name="yolo_config_path"           default="$(find darknet_ros)/yolo_network_config/cfg"/>
    <!-- ROS and network parameter files -->
    <arg name="ros_param_file"             default="$(find darknet_ros)/config/bow_ros.yaml"/>
    <arg name="network_param_file"         default="$(find darknet_ros)/config/yolov3.yaml"/>
  </include>

  <!-- Stern ZED -->
  <include file="$(find darknet_ros)/launch/darknet_ros.launch" ns="stern" >
    <arg name="launch_prefix" default=""/>
    <arg name="image" default="/camera/rgb/image_raw" />
      <!-- Config and weights folder. -->
    <arg name="yolo_weights_path"          default="$(find darknet_ros)/yolo_network_config/weights"/>
    <arg name="yolo_config_path"           default="$(find darknet_ros)/yolo_network_config/cfg"/>
    <!-- ROS and network parameter files -->
    <arg name="ros_param_file"             default="$(find darknet_ros)/config/stern_ros.yaml"/>
    <arg name="network_param_file"         default="$(find darknet_ros)/config/yolov3.yaml"/>

  </include>


</launch>
